#!/bin/bash
# s3md5-awsclifns
# 
#   Copyright (C) 2015 
# This file is part of s3md5 by Russell Gadd <rustleg@gmail.com>
#
# s3md5 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# or see <http://www.gnu.org/licenses/>

#-----------------------------------------------------------------------------------------------
# separated out because may wish to use different client

function createscript  { # produces final set of commands
	# from sorted S3BATCH file, which has following tab separated lines:
	# localcopy line is [1 cp sourcepathfile MD5]
	# del line is [2 del sourcepathfile MD5 trashdate pseudoname]
	# get line is [3 get sourcepathfile MD5 size]
	# put line is [4 put sourcepathfile MD5 size]


	gawk '
	BEGIN { FS = "\t"; OFS = "\t" 
	encrypt = ( "'${ENCRYPT}'" == "Y" )
	printf( "#!/bin/bash\n" )
	prefix = "'"${THROTTLE}"'"
	postfix1 = "2>> " "'${TMPERRLOG}'"
	postfix2 = "2>> " "'${TMPERRLOG}'" " | tee " "'${TMPS3LOG}'"
  countcommands=0

	flagsput="--no-guess-mime-type" 

	# postcommand:
	# this bash function is added after each command
	# timestamp the logs, decrement command count, save state and check for abort (STOP) request
	}
	$1 ~ /1/ { # local copy
		precommand()
		printf("cp -p -n \"%s\" %s/%s %s ; postcommand\n", $3, "'${RECOVERYDIR}'", $4, postfix1) 
		# -p preserve attributes
		# -n no clobber
  }
	$1 ~ /2/ { # del = delete i.e. move into trash folder in s3 with added pseudoname
		precommand()
		printf("aws s3 mv %s/%s \"%s/%s-%s%s\" %s ; postcommand\n", "'${FILESBUCKETFOLDER}'", $4 , "'${DELETESBUCKETFOLDER}'" , $5, $4, $6, postfix2 )
  }
	$1 ~ /3/ { # get = download to RECOVERYDIR
		precommand()
		if ( encrypt)
			dest="'${ENCGETFILES}'"
		else
			dest= "'${RECOVERYDIR}'"
		printf("%s aws s3 cp %s/%s %s %s ; ", prefix, "'${FILESBUCKETFOLDER}'", $4, dest, postfix2) 
		if ( encrypt) { # decrypts after download
			printf("cat %s | gpg --quiet --no-tty --batch --yes --passphrase-fd 0 -o %s/%s -d %s/%s %s ; " , "'${AESKEYFILE}'","'${RECOVERYDIR}'", $4, "'${ENCGETFILES}'" , $4 , postfix1)
		}
		printf(" postcommand\n") 
  }
	$1 ~ /4/ { # put = upload
		precommand()
		if ( encrypt) {
			temp="'${ENCPUTFILES}'/" $4
			printf("cat %s | gpg --no-tty --batch --yes --passphrase-fd 0 --symmetric --cipher-algo aes256 -o %s \"%s\" %s ; " , "'${AESKEYFILE}'", temp , $3, postfix1)
			$3= temp
		}
		printf("%s aws s3 %s cp \"%s\" %s/%s %s ; postcommand\n", prefix, flagsput, $3, "'${UPLOADSBUCKETFOLDER}'", $4, postfix2) 
  }
	function precommand() {
		countcommands++
		# N.B. must use echo instead of printf because rogue % in filenames is interpreted as print control
		# hopefully there will not be any backslashes in the filenames
		printf("cat /dev/null > " "'${TMPERRLOG}'" "; echo \"===> %s %s\"", $2 , $3)
		if ( $1 < 3 )
			printf(" ; ")
		else
			printf(" %.3f MB ; ", $5/1000000)
		}
	' >${CMDSCRIPT}  ${TMPS3COMMANDS2}
}
# -----------------------------------------------------------------------------------------------
function listuploadsbucket {  # into checklist format i.e. MD5 <operation>
	aws s3 ls ${UPLOADSBUCKETFOLDER}/ 2> ${TMPERRLOG} > ${UPLOADSLIST}
	addtimestamplog "${TMPERRLOG}" "${ERRLOG}" # adds to permanent log with timestamp
	# typical output is:
	#	2015-05-06 09:36:59          0 
	# 2015-05-07 11:48:22      92775 3d2d7b4d4cac1a30ffb593bab58e4e49
	# 2015-05-07 11:48:23      93607 3f6961a854d9d90118a549d271983f44
	# ...(etc)
		gawk ' # reformat uploads list into checklist format
	{ if ( NF == 4 ) # skips top line
			printf("%s\tput\n", $4) # MD5 = fourth token
	} ' >${TMPUPLOADSCHECK} ${UPLOADSLIST}
}

#-----------------------------------------------------------------------------------------------
function listdeletesbucket {  # into checklist format i.e. MD5 <operation>
	aws s3 ls ${DELETESBUCKETFOLDER}/ 2> ${TMPERRLOG} > ${DELETESLIST}
	addtimestamplog "${TMPERRLOG}" "${ERRLOG}" # adds to permanent log with timestamp
	# typical output is:
	# 2015-05-05 11:29:00          0 
	# 2015-05-07 11:44:49     700922 2015-05-07-9c6e5f9ab7f06c5a17699812d6ad48e9-mnt-dataNAS-MyDocs-Ebay-PineTable-extended.jpg
	# 2015-05-07 18:13:52     113524 2015-05-07-a2b0219cfbccbede8aff9118fff4c562-mnt-dataNAS-MyDocs-JanetDrive-Darts-Darts Game Sheet 2-L.xlsx
	# ...(etc)
	gawk ' # reformat deletes list into checklist format
	{ MD5=substr($4,12,32) # fourth token, skip 11 chars date at front, then next 32
#			awkdebug( "listdeletesbucket MD5=" MD5 " $4=" $4 )
		if ( NF > 3 ) # skips top line
			printf("%s\tdel\n", MD5)
	} 
	function awkdebug(str) {
		printf("awkdebug: %s\n",  str ) >> "'${DEBUGLOG}'"
	}
	' >${TMPDELETESCHECK} ${DELETESLIST}
}
#-----------------------------------------------------------------------------------------------
function listfilesbucket { # just extract the MD5 (for typical output see listuploadsbucket
	aws s3 ls ${FILESBUCKETFOLDER}/ 2> ${TMPERRLOG} > ${TMPS3FILESLIST}
	addtimestamplog "${TMPERRLOG}" "${ERRLOG}" # adds to permanent log with timestamp
	gawk ' # reformat to just list the MD5 filename
	{ if ( NF == 4 ) # skips top line
			printf("%s\n", $4)
	} ' >${S3FILESLIST} ${TMPS3FILESLIST}
}
#-----------------------------------------------------------------------------------------------
function emptytmpbuckets {	
#	bashdebug "emptytmpbuckets: "
	touch ${TMPERRLOG} ${TMPS3LOG}
	aws s3 mv --recursive ${UPLOADSBUCKETFOLDER}'/'  ${FILESBUCKETFOLDER}'/' 2>> ${TMPERRLOG} | tee -a ${TMPS3LOG}
	aws s3 mv --recursive ${DELETESBUCKETFOLDER}'/'  ${TRASHBUCKETFOLDER}'/' 2>> ${TMPERRLOG} | tee -a ${TMPS3LOG}
	addtimestamplog "${TMPERRLOG}" "${ERRLOG}" # adds to permanent log with timestamp
	addtimestamplog "${TMPS3LOG}" "${S3LOG}" # adds to permanent log with timestamp
}
#-----------------------------------------------------------------------------------------------
function	uploadindex {
#	bashdebug "upload index"
	local saveas=${TODAYYR}"/"${TODAYMTH}"/"${TODAYDAY}"/"${ARCHIVEDINDEX}
	aws s3 cp ${INDEX} ${INDEXBUCKETFOLDER}/${saveas} 2> ${TMPERRLOG} | tee ${TMPS3LOG}
	addtimestamplog "${TMPERRLOG}" "${ERRLOG}" # adds to permanent log with timestamp
	addtimestamplog "${TMPS3LOG}" "${S3LOG}" # adds to permanent log with timestamp
}
#-----------------------------------------------------------------------------------------------

